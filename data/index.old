<!DOCTYPE html>
<html>
    <head>
    <title>TachoWagon</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="data:,">
    <link rel="stylesheet" type="text/css" href="style.css">
        <!-- <style>
            html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}
            body{margin-top: 50px;} h1 {color: #444444;margin: 50px auto 30px;} h3 {color: #444444;margin-bottom: 50px;}
            .button {display: block;width: 150px;background-color: #3498db;border: none;color: white;padding: 13px 13px;text-decoration: none;font-size: 16px;margin: 0px auto 35px;cursor: pointer;border-radius: 4px;}
            .button:hover {background-color: #9f9fff;}
            .button:active {background-color: #7070fa;}
            .reset-button {display: block;width: 150px;background-color: #d0451b;border: none;color: white;padding: 13px 13px;text-decoration: none;font-size: 16px;margin: 0px auto 35px;cursor: pointer;border-radius: 4px;}
            .reset-button:hover {background-color:#bc3315;}
            .reset-button:active {background-color:#992106;}
            p {font-size: 14px;color: #000;margin-bottom: 10px;}
            span {font-size: 14px;color: #888;margin-bottom: 10px;}
        </style> -->
    </head>
    <body>
        <h1>Tachowagon</h1>
        <p><strong>Battery voltage: </strong><span id = "battery">%BATTERY%</span><br />
           <strong>MAC address: </strong><span id = "mac_address">%MACADDRESS%</span><br />
           <strong>Firmware version: </strong><span id = "FW_VERSION">%FIRMWARE%</span><br />
           <strong>Temperature: </strong><span id = "temperature">%TEMP%</span> <strong>&#176;C</strong><br /></p>
        
        <p><strong>Distance cm: </strong><span id = "distance_cm">%DISTANCE_CM%</span><br />
           <strong>Speed CM/s: </strong><span id = "speed_cms">%SPEED_CMS%</span><br />
           <strong>Max CM/s: </strong><span id = "max_speed_cms">%MAX_SPEED_CMS%</span><br /></p>

        <p><strong>Scale KM: </strong><span id = "distance_h0">%KILOMETER_H0%</span><br />
           <strong>Scale KM/h: </strong><span id = "speed_h0">%KMH_H0%</span><br />
           <strong>Max KM/h: </strong><span id = "max_speed_h0">%MAX_KMH_H0%</span><br /></p>

        <p><strong>Pitch (y-axis): </strong><span id = "pitch">%PITCH%</span> deg.<br />
          <strong>Roll (x-axis): </strong><span id = "roll">%ROLL%</span> deg.<br /></p>

        <p><input type="button" onclick="resetValues(1)" id="resetButton1" class="reset-button" value = "Reset distance">
           <input type="button" onclick="resetValues(2)" id="resetButton2" class="reset-button" value = "Reset speed">
           <input type="button" onclick="resetValues(3)" id="resetButton3" class="reset-button" value = "Reset angles">
           %BUTTONPLACEHOLDER%
          </p>
        <p>Get sensor Json data<a class="button" href=/get-json>Get Json</a>
           Check for OTA Update<a class="button" href=/check_update>Check Update</a>
           Change setup<a class="button" href="setup.html">Setup</a></p>
           New index page<a class="button" href="alt_index.html">alt_index</a></p>

        
      <script>
        function resetValues(value) {
          console.log("Reset buttonclicked");
          var xhr = new XMLHttpRequest();
          xhr.open("GET", "/resetvalues?value=" + value, true);
          xhr.send();

        }

        function toggleCheckbox(element) {
        var xhr = new XMLHttpRequest();
        if(element.checked){ xhr.open("GET", "/update?output="+element.id+"&state=1", true); }
        else { xhr.open("GET", "/update?output="+element.id+"&state=0", true); }
        xhr.send();
        }

        if (!!window.EventSource) {
          var source = new EventSource('/events');

          source.addEventListener('open', function (e) {
            console.log("Events Connected");
          }, false);
          source.addEventListener('error', function (e) {
            if (e.target.readyState != EventSource.OPEN) {
              console.log("Events Disconnected");
            }
          }, false);

          source.addEventListener('message', function (e) {
            console.log("message", e.data);
          }, false);

          source.addEventListener('sensordata', function (e){
            //console.log("sensordata", e.data);
            var jsonObj = JSON.parse(e.data);
            for (var key in jsonObj){
              //console.log(key, jsonObj[key]);
              document.getElementById(key).innerHTML = jsonObj[key];
            }
          }, false);
     
        }
      </script>

    </body>
</html>